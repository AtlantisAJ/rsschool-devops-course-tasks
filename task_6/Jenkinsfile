pipeline {
    agent any

    environment {
        IMAGE_NAME = "task-6"
        IMAGE_TAG = "latest"
        SERVICE_NAME = "task-6-service"
        EXPECTED_TEXT = "Task 6 Application Deployment via Jenkins Pipeline"
    }

    stages {
        stage('Prepare Minikube Environment') {
            steps {
                script {
                    sh 'eval $(minikube docker-env)'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("${IMAGE_NAME}:${IMAGE_TAG}")
                    sh "docker images | grep ${IMAGE_NAME}"
                }
            }
        }

        stage('Deploy with Helm') {
            steps {
                sh """
                helm upgrade --install ${IMAGE_NAME} ./helm-chart \
                    --set image.repository=${IMAGE_NAME} \
                    --set image.tag=${IMAGE_TAG} \
                    --set image.pullPolicy=Never \
                    --atomic --wait
                """
            }
        }

        stage('Verify Deployment') {
            steps {
                script {
                    sh "kubectl wait --for=condition=ready pod -l app=${IMAGE_NAME} --timeout=120s"


                    def url = sh(
                        script: "minikube service ${SERVICE_NAME} --url | head -n 1",
                        returnStdout: true
                    ).trim()

                    echo "üîÑcheck to adress: ${url}"

                    def response = sh(
                        script: "curl -s ${url}",
                        returnStdout: true
                    ).trim()

                    echo "üìÑ response to server:\n${response}"

                    if (!response.contains(EXPECTED_TEXT)) {
                        error "‚ùå Text '${EXPECTED_TEXT}' not found"
                    }

                    echo "‚úÖ Verification successful: text found '${EXPECTED_TEXT}'"
                }
            }
        }
    }

    post {
        always {
            sh """
            echo "### Pod status:"
            kubectl get pods
            echo "\n### Pod logs:"
            kubectl logs -l app=${IMAGE_NAME} --tail=50 || true
            """
        }
        success {
            slackSend(
                channel: '#your-channel',
                message: """‚úÖ successfully Task 6!
                *–°–±–æ—Ä–∫–∞:* ${env.BUILD_NUMBER}
                *URL:* ${url}
                *–¢–µ–∫—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:* '${EXPECTED_TEXT}' –Ω–∞–π–¥–µ–Ω"""
            )
        }
        failure {
            slackSend(
                channel: '#your-channel',
                color: 'danger',
                message: """‚ùå Mistake in Task 6!
                *–°–±–æ—Ä–∫–∞:* ${env.BUILD_NUMBER}
                *–õ–æ–≥–∏:* ${env.BUILD_URL}console"""
            )
        }
    }
}
