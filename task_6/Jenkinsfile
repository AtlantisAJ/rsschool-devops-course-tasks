pipeline {
    agent any

    environment {
        IMAGE_NAME = 'task-6'
        IMAGE_TAG = 'latest'
    }

    stages {
        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("${IMAGE_NAME}:${IMAGE_TAG}")
                }
            }
        }

        stage('(Optional) Unit Test') {
            steps {
                echo 'No unit tests defined. Skipping...'
            }
        }

        stage('(Optional) SonarQube Scan') {
            steps {
                echo 'SonarQube scan skipped for static HTML app.'
            }
        }

        stage('Helm Deploy') {
            steps {
                sh """
                    helm upgrade --install ${IMAGE_NAME} ./helm-chart \
                    --set image.repository=${IMAGE_NAME} \
                    --set image.tag=${IMAGE_TAG} \
                    --set image.pullPolicy=Never
                """
            }
        }

        stage('Verify Deployment') {
            steps {
                script {
                    def URL = sh(script: "minikube service ${IMAGE_NAME} --url", returnStdout: true).trim()
                    sh "curl -s $URL | grep 'Task 6' || exit 1"
                    echo "✅ Application is accessible at: $URL"
                }
            }
        }
    }

    post {
        success {
            slackSend channel: '#ci-notifications', message: "✅ Task 6 pipeline passed: ${env.BUILD_URL}"
        }
        failure {
            slackSend channel: '#ci-notifications', message: "❌ Task 6 pipeline failed: ${env.BUILD_URL}"
        }
    }
}
